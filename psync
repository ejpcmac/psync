#!/bin/sh
###
### psync - Patch Sync Utility
### version: 0.1.2
###
### Jean-Philippe Cugnet, March 2016
### <jean-philippe@cugnet.eu>

### The GNU version of tar is needed for patching. On Linux systems, set GNUTAR as tar. On BSD
### systems like FreeBSD or Mac OS X, you must install gnu-tar and set GNUTAR as gtar.
# GNUTAR=tar
GNUTAR=gtar


Error() {
    case $1 in
        "usage")
            echo "Patch Sync Utility"
            echo "version: 0.1.2"
            echo
            echo "Usage: psync <command> [parameters]"
            echo
            echo "List of commands:"
            echo "    diff <source> <patchdir>      Compare source tree with the state file and make a patch"
            echo "    patch <dest> <patchdir>       Patch the destination directory"
            echo
            echo "    init <directory>              Create the initial state file"
            echo
            exit 1
            ;;

        "init usage")
            echo "usage: psync init <directory>"
            exit 1
            ;;

        "diff usage")
            echo "usage: psync diff <source> <patchdir>"
            exit 1
            ;;
        
        "patch usage")
            echo "usage: psync patch <dest> <patchdir>"
            exit 1
            ;;

        "directory")
            echo "psync: $2: No such directory"
            exit 2
            ;;

        "not empty")
            echo "psync: $2: The patch directory must be empty"
            exit 3
            ;;

        "not accessible")
            echo "psync: $2: Directory not accessible"
            exit 4
            ;;

        "not writable")
            echo "psync: $2: Directory not writable"
            exit 4
            ;;

        "bad patchdir")
            echo "psync: $2: Bad patch directory"
            exit 5
            ;;

        "list")
            echo "psync: Impossible to list the files"
            exit 6
            ;;
    esac
}


Check_directory() {
    if [ ! -d "$1" ]; then
        Error "directory" "$1"
    fi
}


Check_empty() {
    if [ "$(ls -A "$1")" ]; then
        Error "not empty" "$1"
    fi
}


Go_into() {
    cd "$1"
    if [ "$?" -ne 0 ]; then
        Error "not accessible" "$1"
    fi
}


Check_writability() {
    touch "$1/.psynctest" 2> /dev/null
    if [ "$?" -ne 0 ]; then
        Error "not writable" "$1"
    fi
    rm "$1/.psynctest"
}


Check_patchdir() {
    if [ ! -f "$1/del" ] || [ ! -f "$1/new" ]; then
        Error "bad patchdir" "$1"
    fi
}


Make_statefile() {
    mkfifo /tmp/psync.fifo
    
    awk '{ printf "\r"NR } END { print " files to consider" }' /tmp/psync.fifo &&
    echo "Saving the state file..." &
    find . -exec ls -aldTnp {} + | \
        awk '{ { printf $1" "$3" "$4" " } for (i=6; i<NF; i++) { printf "%s ",$i } print $NF }' | \
        tee /tmp/psync.fifo | sort -k 8 | \
        gzip -9 - > .psyncstate
    
    if [ "${PIPESTATUS[0]}" -ne 0 ]; then
        rm .psyncstate
        Error "list"
    fi
    
    rm /tmp/psync.fifo
}


#########
# START #
#########

if [ "$#" -lt 1 ]; then
    Error "usage"
fi

case $1 in
    init)
        if [ "$#" -ne 2 ]; then
            Error "init usage"
        fi
        
        Check_directory "$2"
        Go_into "$2"
        Check_writability .

        echo "Creating the directory initial state file..."
        Make_statefile

        echo "Initial state file created!"
        ;;

    diff)
        if [ "$#" -ne 3 ]; then
            Error "diff usage"
        fi

        Check_directory "$2"
        Check_directory "$3"
        Check_empty "$3"
        patchdir=$(realpath "$3")
        Go_into "$2"
        Check_writability .
        Check_writability "$patchdir"

        if [ ! -f .psyncstate ]; then
            echo "No existing state file, creating an empty one."
            /bin/echo -n | gzip -9 - > .psyncstate
        fi

        echo "Backing up the state file..."
        cp -a .psyncstate /tmp/psync.oldstate

        echo "Checking the current state of the directory..."
        Make_statefile

        echo "Checking differences with previous state..."
        mkfifo /tmp/psync.fifo
        gzcat /tmp/psync.oldstate > /tmp/psync.fifo &
        gzcat .psyncstate | diff /tmp/psync.fifo - > /tmp/psync.diff
        rm /tmp/psync.fifo

        echo "Creating archive of files added or modified since last sync..."
        cat /tmp/psync.diff | \
            awk '$1 == ">" { for (i=9; i<NF; i++) { printf "%s ",$i } print $NF }' | \
            tee /tmp/psync.newlist | \
            tar --numeric-owner -vncf "$patchdir/new" -T -
        echo
        
        echo "Files deleted since last sync:"
        cat /tmp/psync.diff | \
            awk '$1 == "<" { for (i=9; i<NF; i++) { printf "%s ",$i } print $NF }' | \
            diff - /tmp/psync.newlist | \
            awk '$1 == "<" { for (i=2; i<NF; i++) { printf "%s ",$i } print $NF }' | \
            tee "$patchdir/del"
        echo

        rm /tmp/psync.*
        echo "Patch successfully created and state file updated!"
        ;;

    patch)
        if [ "$#" -ne 3 ]; then
            Error "patch usage"
        fi

        Check_directory "$2"
        Check_directory "$3"
        Check_patchdir "$3"
        patchdir=$(realpath "$3")
        Go_into "$2"
        Check_writability .

        echo "Deleting files..."
        for f in $(tail -r "$patchdir/del"); do
            rm -vrf "$f"
        done

        echo
        echo "Applying modifications..."
        $GNUTAR --delay-directory-restore --same-owner -vpxf "$patchdir/new"

        echo
        echo "Patch successfully applied!"
        ;;

    *)
        Error "usage"
        ;;
esac
