#!/bin/sh
###
### psync - Patch Sync Utility
### version: 0.3-alpha
###
### Jean-Philippe Cugnet, March 2016
### <jean-philippe@cugnet.eu>


Error() {
    case $1 in
        "usage")
            echo "Patch Sync Utility"
            echo "version: 0.3-alpha"
            echo
            echo "Usage: psync <command> [parameters]"
            echo
            echo "List of commands:"
            echo "    diff <source> <patchdir>      Compare source tree with the state file and make a patch"
            echo "    patch <dest> <patchdir>       Patch the destination directory"
            echo
            echo "    init <directory>              Create the initial state file"
            echo "    update <directory>            Update the state file without changeing the timestamp"
            echo
            echo "    upgrade <directory>           Upgrade the state file version"
            echo
            exit 1
            ;;

        "init usage")
            echo "usage: psync init <directory>"
            exit 1
            ;;

        "update usage")
            echo "usage: psync update <directory>"
            exit 1
            ;;

        "diff usage")
            echo "usage: psync diff <source> <patchdir>"
            exit 1
            ;;

        "patch usage")
            echo "usage: psync patch <dest> <patchdir> [-f <uid> [timestamp]]"
            exit 1
            ;;

        "upgrade usage")
            echo "usage: psync upgrade <directory>"
            exit 1
            ;;

        "directory")
            echo "psync: $2: No such directory"
            exit 2
            ;;

        "not accessible")
            echo "psync: $2: Directory not accessible"
            exit 2
            ;;

        "not writable")
            echo "psync: $2: Directory not writable"
            exit 2
            ;;

        "bad statefile")
            echo "psync: Bad state file format. You may try to upgrade"
            exit 2
            ;;

        "bad patchdir")
            echo "psync: $2: Bad patch directory"
            exit 2
            ;;

        "no statefile")
            echo "psync: No state file in the directory. You may try to init"
            exit 2
            ;;

        "list")
            echo "psync: Impossible to list the files"
            Clear_workdir
            exit 3
            ;;

        "patch exists")
            echo "psync: A patch already exists for this timestamp. Try to patch before diff."
            exit 4
            ;;

        "no statefile dest")
            echo "psync: No state file in the destination. You can try using -f option."
            echo
            echo "usage: psync patch <dest> <patchdir> [-f <uid> [timestamp]]"
            exit 8
            ;;
    esac
}


Check_directory() {
    if [ ! -d "$1" ]; then
        Error "directory" "$1"
    fi
}


Go_into() {
    cd "$1"
    if [ "$?" -ne 0 ]; then
        Error "not accessible" "$1"
    fi
}


Check_writability() {
    touch "$1/.psynctest" 2> /dev/null
    if [ "$?" -ne 0 ]; then
        Error "not writable" "$1"
    fi
    rm "$1/.psynctest"
}


Load_statefile() {
    sfversion=$(gzcat .psyncstate | sed -n 1p)
    if [ "$sfversion" != "~psf!1.0" ]; then
        Error "bad statefile"
    fi

    uid=$(gzcat .psyncstate | sed -n 2p)
    ts=$(gzcat .psyncstate | sed -n 3p)
}


Check_patchdir() {
    if [ ! -f "$1/statetime" ] || [ ! -f "$1/del" ] || [ ! -f "$1/new" ] || [ ! -f "$1/newdir" ]
    then
        Error "bad patchdir" "$1"
    fi
}


Make_workdir() {
    work="/tmp/psync.$uid"
    if [ ! -d "$work" ]; then
        mkdir "$work"
    fi
}


Clear_workdir() {
    rm -rf "$work"
}


Make_statefile() {
    mkfifo "$work/fifo"

    echo "~psf!1.0\n$uid\n$statetime" | gzip -9 - > "$work/statefile"

    awk '{ printf "%s files...\r",NR } END { print NR" files to consider" }' "$work/fifo" &&
    echo "Saving the current state file..." &
    find . -not -path ./.psyncstate -exec stat -f "%c%t%N%t%T" {} + | \
        awk -F\t '{ printf "%s\t%s",$1,$2 } $3 != "/" { $3="" } { print $3 }' | \
        tee "$work/fifo" | sort -t $'\t' -k 2 | \
        gzip -9 - >> "$work/statefile"

    if [ "${PIPESTATUS[0]}" -ne 0 ]; then
        rm "$work/statefile"
        Error "list"
    fi

    rm "$work/fifo"
}


#########
# START #
#########

if [ "$#" -lt 1 ]; then
    Error "usage"
fi

case $1 in
    init)
        if [ "$#" -ne 2 ]; then
            Error "init usage"
        fi

        Check_directory "$2"
        Go_into "$2"
        Check_writability "."

        uid=$(dd if=/dev/random count=1 2> /dev/null | shasum | awk '{ print $1 }')
        Make_workdir

        echo "Creating the directory initial state file..."
        statetime=$(date +%s)
        Make_statefile

        echo "Moving the state file to the directory..."
        cp -a "$work/statefile" .psyncstate
        echo "Initial state file created!"

        Clear_workdir
        ;;

    update)
        if [ "$#" -ne 2 ]; then
            Error "update usage"
        fi

        Check_directory "$2"
        Go_into "$2"
        Check_writability "."

        if [ ! -f .psyncstate ]; then
            Error "no statefile"
        fi

        Load_statefile
        Make_workdir

        echo "Updating the state file for this directory..."
        statetime=$ts
        Make_statefile

        echo "Moving the state file to the directory..."
        cp -a "$work/statefile" .psyncstate
        echo "State file updated!"

        Clear_workdir
        ;;

    diff)
        if [ "$#" -ne 3 ]; then
            Error "diff usage"
        fi

        Check_directory "$2"
        Check_directory "$3"
        patchdir=$(realpath "$3")
        Go_into "$2"
        Check_writability "."
        Check_writability "$patchdir"

        if [ ! -f .psyncstate ]; then
            echo "No existing state file, creating an empty one."
            uid=$(dd if=/dev/random count=1 2> /dev/null | shasum | awk '{ print $1 }')
            echo "~psf!1.0\n$uid\n0" | gzip -9 - > .psyncstate
        fi

        Load_statefile

        if [ ! -d "$patchdir/$uid" ]; then
            mkdir "$patchdir/$uid"
        fi

        if [ -d "$patchdir/$uid/$ts" ]; then
            Error "patch exists"
        fi

        mkdir "$patchdir/$uid/$ts"
        Make_workdir

        echo "Checking the current state of the directory..."
        statetime=$(date +%s)
        Make_statefile

        echo "Checking differences with previous state..."
        mkfifo "$work/fifo"
        gzcat "$work/statefile" | tail -n +4 > "$work/fifo" &
        gzcat .psyncstate | tail -n +4 | diff - "$work/fifo" > "$work/diff"
        rm "$work/fifo"

        echo "Creating archive of files added or modified since last sync..."
        cat "$work/diff" | awk '$1 == ">"' | awk -F\t '{ print $2 }' | tee "$work/newlist" | \
            grep -v /$ | tar --numeric-owner -vncf "$patchdir/$uid/$ts/new" -T -
        echo

        echo "Creating archive of directories added or modified since last sync..."
        grep /$ "$work/newlist" | tar --numeric-owner -vncf "$patchdir/$uid/$ts/newdir" -T -
        echo

        echo "Files deleted since last sync:"
        cat "$work/diff" | awk '$1 == "<"' | awk -F\t '{ print $2 }' | \
            diff - "$work/newlist" | awk '$1 == "<"' | cut -c 3- | \
            tee "$patchdir/$uid/$ts/del"
        echo

        echo "$statetime" > "$patchdir/$uid/$ts/statetime"
        echo "Patch successfully created!"

        echo "Updating the state file..."
        cp -a "$work/statefile" .psyncstate
        echo "State file updated!"

        Clear_workdir

        if [ "$ts" -eq 0 ]; then
            echo
            echo "The patch created is an initial one. You can patch an empty directory with:"
            echo
            echo "    psync patch <empty_dir> $3 -f $uid"
            echo
        fi
        ;;

    patch)
        if [ "$#" -lt 3 ]; then
            Error "patch usage"
        fi

        if [ "$#" -gt 3 ]; then
            if [ "$#" -eq 4 ] || [ "$#" -gt 6 ] || [ "$4" != "-f" ]; then
                Error "patch usage"
            fi
        fi
        
        Check_directory "$2"
        Check_directory "$3"
        patchdir=$(realpath "$3")
        Go_into "$2"
        Check_writability "."
        
        if [ "$#" -gt 3 ]; then
            uid="$5"
            
            if [ "$#" -eq 6 ]; then
                ts="$6"
            else
                ts=0
            fi

            if [ "$ts" -ne 0 ]; then
                read -p \
                  "Are you sure to apply a patch as if the directory were at timestamp $ts? [y/N]"\
                  -n 1 -s answer
                echo
                if [ "$answer" != "y" ] && [ "$answer" != "Y" ]; then
                    echo "Aborted!"
                    exit 0
                fi
            elif [ "$(ls -A)" ]; then
                read -p \
                  "The destination directory is not empty. Are you sure to apply the patch? [y/N]"\
                  -n 1 -s answer
                echo
                if [ "$answer" != "y" ] && [ "$answer" != "Y" ]; then
                    echo "Aborted!"
                    exit 0
                fi
            fi

            echo "~psf!1.0\n$uid\n$ts" | gzip -9 - > .psyncstate
        fi

        if [ ! -f .psyncstate ]; then
            Error "no statefile dest"
        fi

        statetime="0"
        Load_statefile

        while true; do
            echo "Checking if there is a new patch for timestamp $ts..."
            if [ ! -d "$patchdir/$uid/$ts" ]; then
                echo "No patch available!"

                if [ $statetime != "0" ]; then
                    Make_workdir
                    
                    echo
                    echo "Updating the state file..."
                    Make_statefile

                    echo "Moving the state file to the directory..."
                    cp -a "$work/statefile" .psyncstate
                    echo "State file updated!"

                    Clear_workdir
                fi

                exit 0
            fi
           
            echo "Applying patch:"
            echo

            Check_patchdir "$patchdir/$uid/$ts"
            statetime=$(cat "$patchdir/$uid/$ts/statetime")

            echo "Deleting files..."
            for f in $(tail -r "$patchdir/$uid/$ts/del"); do
                rm -vrf "./$f"
            done
            echo
        
            echo "Applying modifications to files..."
            tar --same-owner -vpxf "$patchdir/$uid/$ts/new"
            echo

            echo "Applying modification to directories..."
            tar --same-owner -vpxf "$patchdir/$uid/$ts/newdir"
            echo

            echo "Patch successfully applied!"
            
            read -p "Delete the applied patch? [Y/n] " -n 1 -s answer
            echo
            if [ "$answer" != "n" ] && [ "$answer" != "N" ]; then
                rm -rf "$patchdir/$uid/$ts"
                echo "Patch deleted!"
            fi
            echo

            ts=$statetime
        done
        ;;

    upgrade)
        if [ "$#" -ne 2 ]; then
            Error "upgrade usage"
        fi

        Check_directory "$2"
        Go_into "$2"
        Check_writability "."

        if [ ! -f .psyncstate ]; then
            Error "no statefile"
        fi

        sfversion=$(gzcat .psyncstate | sed -n 1p)
        case $sfversion in
            "~psf!1.0")
                echo "The state file is already at version 1.0"
                ;;

            *)
                echo "The state file does not contain a version number."
                echo "It may be a state file created with a psync version prior to 0.3-alpha."
                echo

                while true; do
                    read -p "Is the state file created with a version prior to 0.3-alpha? (y/n) " \
                        -n 1 -s answer
                    echo
                    if [ "$answer" == "n" ] || [ "$answer" == "N" ]; then
                        echo "Upgrade aborted!"
                        exit 0
                    elif [ "$answer" == "y" ] || [ "$answer" == "Y" ]; then
                        break
                    fi
                done

                echo
                echo "In order to upgrade properly from psync v0.2.x-alpha, please do the following actions:"
                echo
                echo "    - With psync v0.2.x-alpha, diff the modified directory and patch the others"
                echo "    - Do not modify any of the directories in sync"
                echo "    - If you have modified the extended attributes or ACL of some files, they may be out of sync"
                echo "      In this case, you should reinitialise the synchronisation process"
                echo "    - When all the directories are synchronised and unmodified, you can do the upgrade"
                echo
                
                while true; do
                    read -p "Do you have performed the needed actions? (y/n) " -n 1 -s answer
                    echo
                    if [ "$answer" == "n" ] || [ "$answer" == "N" ]; then
                        echo "Upgrade aborted!"
                        exit 0
                    elif [ "$answer" == "y" ] || [ "$answer" == "Y" ]; then
                        break
                    fi
                done

                echo
                read -p "Ready to upgrade. Do you want to start the process? [Y/n] " -n 1 -s answer
                echo
                if [ "$answer" == "n" ] || [ "$answer" == "N" ]; then
                    echo "Upgrade aborted!"
                    exit 0
                fi
                echo

                echo "Reading the current state file..."
                uid=$(gzcat .psyncstate | sed -n 1p)
                ts=$(gzcat .psyncstate | sed -n 2p)

                Make_workdir

                echo "Upgrading the state file..."
                statetime=$ts
                Make_statefile

                echo "Moving the new state file to the directory..."
                cp -a "$work/statefile" .psyncstate
                echo "State file upgraded to version 1.0!"

                Clear_workdir
                ;;
        esac
        ;;

    *)
        Error "usage"
        ;;
esac
